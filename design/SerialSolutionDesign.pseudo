record JobInformation
 
  string fileName
  string extension
  double stageDuration
  double termalDifusivity
  double cellDimensions
  double equilibriumPointSensitivity
  int stateAmountRequired

end record

procedure runTermalTransferSimulation() 

  jobData := getJobData(fileName)
  processAllJobs(jobData)
  erase all job data

end procedure

procedure getJobData(fileName) 

  create vector for jobs
  file := openFile(fileName)
  find where the extension ends
  get the extension out of the file name
  while data can be extracted from the file do
    jobs[jobsFound] := read(file)
    jobsFound := jobsFound + 1
  end while
  closeFile(file)

end procedure

procedure processAllJobs() 

  for job := 0 to jobAmount do
    processJob(jobs[job])
  end for
  writeReport()

end procedure

procedure processJob(currentJob)

  dataMatrix := getMatrix()
  newData := dataMatrix
  inEquilibrium := false
  while inEquilibrium = false do
    notInEquilibrium := runStage()
    if notInquilibrium = 0 do
      inEquilibrium := true
    end if
    swap(dataMatrix, newData)
    stagesProcessed := stagesProcessed + 1
    notInEquilibrium := 0
  end while
  writeMatrixOnFile(newData)

end procedure

procedure getMatrix(fileName)

  get complete path with file name
  open binary file
  read matrix cellDimensions
  make new matrix
  for row := 0 to rowAmount do
    read from file into matrix file
  end for
  close file
  return matrix

end procedure

procedure writeMatrixOnFile(newData)
 
  get dimensions
  get new file name
  create binary file
  write matrix dimensions on file
  for row := 0 to rowAmount do
    write matrix row on file
  end for
  close file
  
end procedure

procedure runStage(data, newData, parameters)

  get sizes
  get formula parameters
  for row := 0 to rowAmount do
    for col := 0 to colAmount do
      find the sum of neighbors
      find the new state of the block
      difference := abs(data, newData)
      if difference > epsilom do
        notInEquilibriumAmount := notInEquilibriumAmount + 1
      end if
    end for
  end for
  return notInequilibriumAmount

end procedure

  

procedure writeReport() 

  open original txt file
  create new report file
  while job < jobAmount do
    write on file
    job++
  end while
  close all files

end procedure
