procedure runTermalTransferSimulation()

  fileName := argument
  threadAmount := systemThreadAmount()
  if thread is given do
    threadAmount := argument
  end if
  jobData := getJobData(fileName)
  processAllJobs(jobData)

end procedure

procedure processJob() 
  dataMatrix := getMatrix()

  declare newData
  inEquilibrium := false
  with all threads do
    parallel for row := 0 to rowAmount do
      for col := 0 to colAmount do
        newData[row][col] := data[row][col]
      end for
    end for
    while inEquilibrium = false do
      localNotInEquilibrium := runStage()
      notInEquilibrium := notInEquilibrium + localNotInEquilibrium
      barrierWait()
      if notInquilibrium = 0 do
        inEquilibrium := true
      end if
      only one thread do
        swap(dataMatrix, newData)
        stagesProcessed := stagesProcessed + 1
        notInEquilibrium := 0
      only one thread end
    end while
  end threads

end procedure

procedure runStage()

  get sizes
  get formula parameters
  parallel for row := 0 to rowAmount do
    for col := 0 to colAmount do
      find the sum of neighbors
      find the new state of the block
      difference := abs(data, newData)
      if difference > epsilom do
        notInEquilibriumAmount := notInEquilibriumAmount + 1
      end if
    end for
  end for
return notInequilibriumAmount

end procedure