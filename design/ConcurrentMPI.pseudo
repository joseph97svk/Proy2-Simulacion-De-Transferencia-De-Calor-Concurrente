runTermalTransferSimulation() {

  Initiate mpi communication environment
  get the rank of the current process
  get the amount of processes

  if there is just one process
    jobData := getJobData(fileName)
    processAllJobs(jobData)
    erase all job data
  else 
    if rank = 0
      mpiRank0()
    else
      mpiRankAny()

}

mpiRank0() {

  get jobs
  sendData()
  stopProcesses()

  for all processes
    send order to send times

  for all processes
    receive time

  write report
  erase data
}

sendData() {

  get size of extension, it is shared among all

  for all jobs
    receive signal from processes ready to process
    set rank that is processing job in the array for data receive ordering
    send sizes of name and extension
    send name
    send extension
    send 4 datas

}

stopProcesses() {

  for all processess
    receive ready to process

    signal there is no more to do
}

mpiRankAny() {

  create job vector

  while there are jobs
    there is data := receiveData()

    if there is no data
      break cycle
  
    processJob()
    wait until told to continue

    for all processed jobs
      send the time

}

receiveData() {

  send ready to process
  receive string sizes

  if file name size = 0
    return there is no data to process

  add new job to the vector
  receive fileName
  receive extension
  receive data

  return there is data to proess
  
}